{"ast":null,"code":"export default function HandleScroll() {\n  const leftToRightElements = document.querySelectorAll(\".left-to-right\");\n  const rightToLeftElements = document.querySelectorAll(\".right-to-left\");\n\n  // Create an Intersection Observer\n  const observer = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n      const {\n        target,\n        isIntersecting\n      } = entry;\n      const index = parseInt(target.dataset.index, 10);\n      if (isIntersecting) {\n        if (target.classList.contains(\"left-to-right\")) {\n          target.classList.add(`left-to-right-${index}`);\n        } else if (target.classList.contains(\"right-to-left\")) {\n          target.classList.add(`right-to-left-${index}`);\n        }\n      }\n    });\n  });\n  leftToRightElements.forEach((element, index) => {\n    element.dataset.index = index + 1; // Store the index as a data attribute\n    observer.observe(element);\n  });\n  rightToLeftElements.forEach((element, index) => {\n    element.dataset.index = index + 1; // Store the index as a data attribute\n    observer.observe(element);\n  });\n}\n_c = HandleScroll;\nvar _c;\n$RefreshReg$(_c, \"HandleScroll\");","map":{"version":3,"names":["HandleScroll","leftToRightElements","document","querySelectorAll","rightToLeftElements","observer","IntersectionObserver","entries","forEach","entry","target","isIntersecting","index","parseInt","dataset","classList","contains","add","element","observe","_c","$RefreshReg$"],"sources":["/Users/aminforout/Desktop/projects/project5/client/src/assets/js/scroll.js"],"sourcesContent":["export default function HandleScroll() {\n  const leftToRightElements = document.querySelectorAll(\".left-to-right\");\n  const rightToLeftElements = document.querySelectorAll(\".right-to-left\");\n\n  // Create an Intersection Observer\n  const observer = new IntersectionObserver((entries) => {\n    entries.forEach((entry) => {\n      const { target, isIntersecting } = entry;\n      const index = parseInt(target.dataset.index, 10);\n\n      if (isIntersecting) {\n        if (target.classList.contains(\"left-to-right\")) {\n          target.classList.add(`left-to-right-${index}`);\n        } else if (target.classList.contains(\"right-to-left\")) {\n          target.classList.add(`right-to-left-${index}`);\n        }\n      }\n    });\n  });\n\n  leftToRightElements.forEach((element, index) => {\n    element.dataset.index = index + 1; // Store the index as a data attribute\n    observer.observe(element);\n  });\n\n  rightToLeftElements.forEach((element, index) => {\n    element.dataset.index = index + 1; // Store the index as a data attribute\n    observer.observe(element);\n  });\n}\n"],"mappings":"AAAA,eAAe,SAASA,YAAYA,CAAA,EAAG;EACrC,MAAMC,mBAAmB,GAAGC,QAAQ,CAACC,gBAAgB,CAAC,gBAAgB,CAAC;EACvE,MAAMC,mBAAmB,GAAGF,QAAQ,CAACC,gBAAgB,CAAC,gBAAgB,CAAC;;EAEvE;EACA,MAAME,QAAQ,GAAG,IAAIC,oBAAoB,CAAEC,OAAO,IAAK;IACrDA,OAAO,CAACC,OAAO,CAAEC,KAAK,IAAK;MACzB,MAAM;QAAEC,MAAM;QAAEC;MAAe,CAAC,GAAGF,KAAK;MACxC,MAAMG,KAAK,GAAGC,QAAQ,CAACH,MAAM,CAACI,OAAO,CAACF,KAAK,EAAE,EAAE,CAAC;MAEhD,IAAID,cAAc,EAAE;QAClB,IAAID,MAAM,CAACK,SAAS,CAACC,QAAQ,CAAC,eAAe,CAAC,EAAE;UAC9CN,MAAM,CAACK,SAAS,CAACE,GAAG,CAAE,iBAAgBL,KAAM,EAAC,CAAC;QAChD,CAAC,MAAM,IAAIF,MAAM,CAACK,SAAS,CAACC,QAAQ,CAAC,eAAe,CAAC,EAAE;UACrDN,MAAM,CAACK,SAAS,CAACE,GAAG,CAAE,iBAAgBL,KAAM,EAAC,CAAC;QAChD;MACF;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFX,mBAAmB,CAACO,OAAO,CAAC,CAACU,OAAO,EAAEN,KAAK,KAAK;IAC9CM,OAAO,CAACJ,OAAO,CAACF,KAAK,GAAGA,KAAK,GAAG,CAAC,CAAC,CAAC;IACnCP,QAAQ,CAACc,OAAO,CAACD,OAAO,CAAC;EAC3B,CAAC,CAAC;EAEFd,mBAAmB,CAACI,OAAO,CAAC,CAACU,OAAO,EAAEN,KAAK,KAAK;IAC9CM,OAAO,CAACJ,OAAO,CAACF,KAAK,GAAGA,KAAK,GAAG,CAAC,CAAC,CAAC;IACnCP,QAAQ,CAACc,OAAO,CAACD,OAAO,CAAC;EAC3B,CAAC,CAAC;AACJ;AAACE,EAAA,GA7BuBpB,YAAY;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}